---
title: Credential Management in Concourse OLM
owner: Concourse / OLM
---
[Encrypting](./encryption.html) your Concourse OLM deployment is a good first step to securing your CI/CD tools, but for even greater security, consider using a credential manager as well. 

Explicit credential management provides temporary credentials to your Concourse OLM builds. These credentials are not stored anywhere. Credential management also allows for credentials to be rotated and managed from outside the pipeline or team, and prevents them from being revealed by [get-pipeline](https://concourse.ci/fly-get-pipeline.html).

Credential management works by replacing the credentials with [((parameters))](https://concourse.ci/fly-set-pipeline.html#parameters) in your pipeline or task config files. When the ATC is about to run the step or check that is configured with the parameters, it will resolve them by fetching the values from the credential manager. This ensures that credentials are not transmitted over insecure channels, or stored in build history.

Concourse OLM uses [Vault](https://vaultproject.io/) as a credential manager.

## What credentials can I store?
You can use a credential manager to control the following resources:
<ul>
<li><a href="https://concourse.ci/configuring-resources.html#source">Source</a> under <a href="https://concourse.ci/configuring-resources.html">resources</a> or <a href="https://concourse.ci/configuring-resource-types.html">resource types</a> in a pipeline</li>
<li><a href="https://concourse.ci/configuring-resources.html#source">Source</a> under <a href="https://concourse.ci/running-tasks.html#image_resource">image_resource</a> in a task config</li>
<li><a href="https://concourse.ci/task-step.html#task-params">Parameters</a> in a pipeline</li>
<li><a href="https://concourse.ci/running-tasks.html#params">Parameters</a> in a task config</li>
</ul>
Where these values are looked up and how the credential manager is configured depends on the backend. Consult the relevant section below for whichever backend you want to use.

## Using Vault
### Configuration
Statically configure your ATC with a Vault server URL (plus any TLS config), and either a client token or an auth backend. To configure your ATC, read the [BOSH documentation](http://bosh.io/jobs/atc?source=github.com/concourse/concourse&version=3.3.2#p=vault).

For example, to point the ATC at an internal Vault server with TLS signed by a local Certificate Authority (CA), using an [AppRole](https://www.vaultproject.io/docs/auth/approle.html) auth backend, you could configure:
<pre class="terminal">
concourse web ... \
  --vault-url ht<span>tps</span>://YOUR-VAULT-IP-ADDRESS \
  --vault-ca-cert /FILEPATH/YOUR-CA.cert \
  --vault-auth-backend approle \
  --vault-auth-param role\_id=db02de05-fa39-4855-059b-67221c5c2f63 \
  --vault-auth-param secret\_id=6a174c20-f6de-a53c-74d2-6018fcceff64
</pre>
You may want to use the [TLS](https://www.vaultproject.io/docs/auth/cert.html) auth backend instead. If you do, you must specify a client certificate and private key:
<pre class="terminal">
concourse web ... \
  --vault-url ht<span>tps</span>://YOUR-VAULT-IP-ADDRESS \
  --vault-ca-cert /FILEPATH/YOUR-CA.cert \
  --vault-client-cert /FILEPATH/MY-CLIENT.cert \
  --vault-client-key /FILEPATH/MY-CLIENT.key \
  --vault-auth-backend cert
</pre>
If you use the TLS backend, no parameters are necessary. The TLS backend will check the certificate against all roles if you don’t specify a name.

Alternatively, if you’re using a Vault periodic token, you can pass it directly as <code>--vault-client-token</code>. 
<pre class="terminal">
concourse web ... \
  --vault-url ht<span>tps</span>://YOUR-VAULT-IP \
  --vault-ca-cert /FILEPATH/YOUR-CA.cert \
  --vault-client-token c2c2fbd5-2893-b385-6fa5-30050439f698
</pre>

## Credential Lookup Rules
When resolving a parameter such as ((YOUR\_PARAM)), it will look in the following paths:
* /concourse/TEAM\_NAME/PIPELINE\_NAME/YOUR\_PARAM
* /concourse/TEAM\_NAME/YOUR\_PARAM

If you need to, change the leading /concourse by specifying <code>--vault-path-prefix</code>.

If the action is running in the context of a pipeline, for example, a check or a step, the ATC will look in the pipeline path first. If it's not found there, it will look in the team path. This allows credentials to be scoped widely if they're common across many pipelines.

If an action is being run in a one-off build, the ATC will only look in the team path.
