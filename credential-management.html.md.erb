---
title: Credential Management in Concourse
owner: Concourse
---

<strong><%= modified_date %></strong>

[Encrypting](./encryption.html) your Concourse  deployment is a good first step to securing your CI/CD tools. For even greater security, Pivotal recommends that you use a credential manager as well.

Explicit credential management provides temporary credentials to your Concourse  builds. These credentials are not stored anywhere. Credential management also allows for credentials to be rotated and managed from outside the pipeline or team, and prevents them from being revealed by [get-pipeline](https://concourse-ci.org/managing-pipelines.html#fly-get-pipeline).

Credential management works by replacing the credentials with [((parameters))](https://concourse-ci.org/setting-pipelines.html#pipeline-vars) in your pipeline or task config files. When the ATC is about to run the step or check that is configured with the parameters, it will resolve them by fetching the values from the credential manager. This ensures that credentials are not transmitted over insecure channels, or stored in build history.

Concourse supports CredHub and Vault for external credential management.
For the full list of supported external credential managers,
see [Credential Management](https://concourse-ci.org/creds.html) in the Concourse documentation.

## <a id="what-creds"></a> What credentials can I store?
You can use a credential manager to control the following resources:

* [Source](https://concourse-ci.org/resource-types.html#resource-type-source) under [resources](https://concourse-ci.org/resources.html) [resource types](https://concourse-ci.org/resource-types.html) in a pipeline
* [Tasks](https://concourse-ci.org/tasks.html) in their entirety - whether from [file](https://concourse-ci.org/task-step.html#task-step-file) or [config](https://concourse-ci.org/task-step.html#task-step-config) in a pipeline, or a config executed with [fly execute](https://concourse-ci.org/running-tasks.html#fly-execute)
* [webhook_token](https://concourse-ci.org/resources.html#resource-webhook-token) under [resources](https://concourse-ci.org/resources.html) in a pipeline

Where these values are looked up and how the credential manager is configured depends on the backend. Consult the relevant section below for whichever backend you want to use.

## <a id="use-credhub"></a> Using CredHub

This section describes using CredHub for credential management in Concourse. For general information, see the [CredHub](https://github.com/cloudfoundry-incubator/credhub) repository.

This section describes using HashiCorp Vault for credential management in Concourse. For general information, see the [Vault](https://vaultproject.io/) homepage.

### <a id="confi-credhub"></a> Configuration
The web node is statically configured with a CredHub server URL with TLS and client config.

To configure CredHub, provide the `credhub` properties to your web node. More details on this process are described in the [BOSH documentation](https://bosh.io/jobs/web?source=github.com/concourse/concourse-bosh-release&version=5.2.0#p%3dcredhub).
Additional details can be found on the Concourse documentation regarding [Using CredHub](https://concourse-ci.org/credhub-credential-manager.html).

### <a id="lookup-rules-credhub"></a> Credential Lookup Rules
When resolving a parameter such as `((foo_param))`, it will look in the following paths, in order:

* `/concourse/TEAM_NAME/PIPELINE_NAME/foo_param`
* `/concourse/TEAM_NAME/foo_param`

The leading `/concourse` can be changed by specifying `--credhub-path-prefix`.

CredHub credentials actually have different types, which may contain multiple values. For example, the `user` type specifies both `username` and `password`. You can specified the field to grab via `.` syntax, e.g. `((foo_param.username))`

If the web node is interpolating a variable to schedule some work that is scoped to a pipeline, it will first look in the path of that pipeline. If it's not found there, it will look in the team path. This allows credentials to be scoped widely if they're common across many pipelines.

If the web node is interpolating a variable to run a one-off build, it will only look in the path for the team that the user is currently logged in to.

## <a id="use-vault"></a> Using Vault

This section describes using HashiCorp Vault for credential management in Concourse. For general information, see the [Vault](https://vaultproject.io/) homepage.

### <a id="confi-vault"></a> Configuration
The web node is statically configured with a Vault server URL (plus any TLS config), and either a client token or an auth backend.

To configure Vault, provide the `vault` properties to your web node. More details on this process are described in the [BOSH documentation](http://bosh.io/jobs/atc?source=github.com/concourse/concourse&version=3.3.2#p=vault).
Additional details can be found on the Concourse documentation regarding [Using Vault](https://concourse-ci.org/vault-credential-manager.html).

### <a id="lookup-rules-vault"></a> Credential Lookup Rules
When resolving a parameter such as ((YOUR\_PARAM)), the web node looks in the following paths:

* `/concourse/TEAM\_NAME/PIPELINE\_NAME/YOUR\_PARAM`
* `/concourse/TEAM\_NAME/YOUR\_PARAM`

If you need to, change the leading `/concourse` by specifying `--vault-path-prefix`.

If the web node is interpolating a variable to schedule some work that is scoped to a pipeline, it will first look in the path of that pipeline. If it's not found there, it will look in the team path. This allows credentials to be scoped widely if they're common across many pipelines.

If the web node is interpolating a variable to run a one-off build, it will only look in the path for the team that the user is currently logged in to.
