---
title: Concourse Architecture
owner: Concourse
---

This topic describes the VMs and software components that make up a Concourse installation.

## <a id="diagram"></a> Component Diagram

Concourse runs its software components on three VM types: _web_ VMs, _server_ VMs, and _worker_ VMs. The web VM accepts external requests, typically routed by a load balancer. This diagram shows where Concourse components run and what their communication paths are.

![Arch Doc](concourse-arch.png)

The [Component Descriptions](#description) below explain what each component does. The [Internal vs. External Workers](#comms) section describes the two setups that enable the ATC to communicate with workers, depending on whether or not it can access the worker VMs directly.

## <a id="description"></a> Component Descriptions

The following table describes the function of each Concourse component:

<table>
  <tr>
    <th>VM</th>
    <th>Component</th>
    <th>Function</th>
  </tr><tr>
    <td rowspan=2><b>Web</b></td>
    <td><b>ATC</b></td>
    <td>Runs an HTTP server that:
      <ul><li>Provides the Concourse web UI.</li>
      <li>Serves the Concourse API on port 8080, to support the Fly CLI and other components.</li>
      <li>Schedules pipelines to run on worker VMs.</li></ul></td>
  </tr><tr>
    <td><b>TSA</b></td>
    <td>Runs an SSH server that:
      <ul><li>Listens on port 2222.</li>
      <li>Securely <a href="http://concourse.ci/registering-via-tsa.html">registers worker VMs</a> for use by the ATC.</li>
      <li>For <a href="#comms-external">external worker</a> VMs, handshakes opens a reverse SSH tunnel for ongoing communication between the ATC and the worker.</li>
      <li>Pings workers for heartbeat every 30 seconds, and notifies ATC of data changes, or that worker is in <code>stalled</code> state if no response.</li></ul>
    </td>
  </tr><tr>
    <td><b>Database</b></td>
    <td><b>PostgreSQL</td>
    <td>Stores pipeline data, such as build logs and resource versions, for use by the ATC.</td>
  </tr><tr>
    <td rowspan=3><b>Worker</b></td>
    <td><b>Beacon</b></td>
    <td><ul><li>For <a href="#comms-external">external worker</a> VMs, handshakes with TSA to open a reverse SSH tunnel for ongoing communication between the ATC and the worker.</li>
    <li>Sends Garden and Baggageclaim addresses to the ATC, to register that the worker is ready to run Concourse build pipelines</li></ul>
  </tr><tr>
    <td><b>Garden</b></td>
    <td>Runs an HTTP server that:
      <ul><li>Listens on port 7777.</li>
      <li>Provides an API for the ATC to manage <b>containers</b> to do things like:
        <ul><li>Discover new versions of <a href="http://concourse.ci/resource-types.html">resources</a>.</li>
        <li>Run the tasks in a pipeline <a href="http://concourse.ci/build-plans.html">build plan.</a></li></ul></li></ul></td>
  </tr><tr>
    <td><b>Baggageclaim</b></td>
    <td>Runs an HTTP server that:
      <ul><li>Listens on port 7788.</li>
      <li>Provides an API for the ATC to manage disk resources, or <b>volumes</b>, mounted to containers.</li>
      <li>Uses volumes to store persistent caches of resource versions and to propagate artifacts such as caches and task outputs through the containers used for a build.</li></ul></td>
  </tr>
</table>

For more information, see the [Concourse Documentation](http://concourse.ci/architecture.html). 

## <a id="comms"></a> Internal vs. External Workers

Concourse workers can be either _internal_, also called _local_; or _external_, also called _remote_. These two types of worker VMs differ as follows:

* A worker VM is **internal** when the web VM, which hosts the ATC, can make direct HTTP calls to the worker VM.
  - Typical when web and worker VMs are all on the same private network.
  - To let users call the Concourse API from anywhere, point a load balancer to the web VM.

* A worker VM is **external** when the web VM cannot directly connect to the worker VM via HTTP or SSH.
  - Typical when the worker VMs are behind a firewall in a separate network from the web VM, or when security groups prevent communication from web VM to worker.
  - To let users call the Concourse API from anywhere, host web VM on a public network and run external workers on a separate, private network.

Both internal and external workers can use SSH to securely log into the web VM.

Depending on whether the worker VMs are internal or external, Concourse sets up secure communications from the ATC as described below.

### <a id="comms-internal"></a> Internal Worker Communications

Concourse sets up communications between the ATC and internal worker VMS as follows:

1. The worker's Beacon establishes an SSH connection to the TSA port on the web VM.

1. The Beacon sends the `register-worker` command to the TSA, passing in the worker [data object](https://github.com/concourse/atc/blob/master/worker.go).

1. The TSA extracts the Garden and Baggageclaim addresses from the worker data object and sends them to the ATC.

1. Meanwhile, the TSA begins polling the worker every 30 seconds, its heartbeat, and updates the ATC with any data changes or outages.

1. ATC makes direct HTTP calls to Garden and Baggageclaim on the worker, to create containers and volumes for running containerized processes.

### <a id="comms-external"></a> External Worker Communications

Concourse sets up communications between the ATC and external worker VMS as follows:

1. The worker's Beacon establishes an SSH connection to the TSA port on the web VM.

1. The Beacon sends the `forward-worker` command to the TSA, passing in the worker [data object](https://github.com/concourse/atc/blob/master/worker.go).

1. The TSA establishes two unique hidden local ports on the web VM, and prompts the Beacon to create a reverse-SSH tunnel from the web VM's hidden local ports to the external worker's Garden and Baggageclaim ports.

1. The TSA sends the hidden local port addresses to the ATC.

1. Meanwhile, the TSA begins polling the worker every 30 seconds for its heartbeat, and updates the ATC with any data changes or outages.

1. When the ATC makes HTTP calls to Garden and Baggageclaim on the worker, it actually sends them to its own hidden local ports. Then the SSH daemon running on the web VM forwards the requests to the worker VM via the reverse-SSH tunnel.





